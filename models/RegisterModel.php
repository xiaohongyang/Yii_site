<?php
/**
 * Created by PhpStorm.
 * User: xiaohongyang
 * Date: 2016/11/25
 * Time: 20:46
 */

namespace app\models;


use yii\base\Exception;
use yii\behaviors\TimestampBehavior;
use yii\helpers\FileHelper;
use yii\log\Logger;
use yii\web\UploadedFile;

class RegisterModel extends BaseModel
{
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className()
            ]
        ];
    }


    public static function tableName()
    {
        return \Yii::$app->db->tablePrefix.'user';
    }

    public function formName()
    {
        return \Yii::$app->db->tablePrefix.'user';
    }


    public $mobile;

    public function scenarios()
    {
        return [
            self::SCENARIO_CREATE => [
                'mobile',
            ]
        ];
    }


    public function rules(){

        $rules = [
            [
                'mobile', 'required', 'on' => self::SCENARIO_CREATE, 'message' => '请输入手机号'
            ]
        ];

        return $rules;
    }

    public function attributeLabels($attribute)
    {
        return [
            'mobile' => '手机号码',
        ];
    }


    /**
     * 创建用户, 用户表增加一条记录，用户信息表也增加一条记录
     * @param $data
     * @return bool
     */
    public function create($data){

        $rs = false;
        $this->setScenario(self::SCENARIO_CREATE);

        if (!key_exists(self::formName(), $data)) {
            $data = [self::formName() => $data];
        }

        if ( $this->load($data) && $this->validate()) {

            $this->setAttribute('mobile', $this->mobile);
            $transaction = \Yii::$app->db->beginTransaction();
            try {
                $rs = $this->save();
                if($rs){
                    $transaction->commit();
                } else {
                    $transaction->rollBack();
                    \Yii::$app->log->getLogger()->log("添加用户失败!");
                }
            } catch (Exception $e) {
                \Yii::getLogger()->log($e->getMessage(),Logger::LEVEL_ERROR);
                $transaction->rollBack();
            }
        }
        return $rs;
    }


    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

}