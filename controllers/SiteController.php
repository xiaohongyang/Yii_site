<?php

namespace app\controllers;

use app\common\components\helpers\MapHelper;
use app\common\components\helpers\ToolsHelper;
use app\common\components\helpers\WeChatHelper;
use app\models\RegisterModel;
use app\models\RegisterUserInfoModel;
use app\models\TeamModel;
use app\models\TeamUserModel;
use app\models\UserIdentity;
use app\models\UserModel;
use app\models\UserMongoModel;
use app\models\WeChatModel;
use linslin\yii2\curl\Curl;
use Yii;
use yii\base\Exception;
use yii\filters\AccessControl;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;
use yii\web\Controller;
use yii\filters\VerbFilter;
use app\models\LoginForm;
use app\models\ContactForm;
use yii\web\Cookie;

class SiteController extends BaseController
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->layout = false;
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['logout'],
                'rules' => [
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
//                    'logout' => ['post'],
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    /**
     * Displays homepage.
     *
     * @return string
     */
    public function actionIndex()
    {

        $str = "information_schema,advanced_shop,app_familys,app_web168,app_zniu,award,bbd2pingan,ad_userdb1,db2,dsp_ad_center,ad_userdsp_ad_center_2,dsp_ad_center_3,dsp_sync_service,ecshop,jike,jike_old,m.szsyspx.com,moban,money_2,mysql,onedesk,onedesk_ad_center,onedesk_ad_report,performance_schema,pingan_6,pingan_8dk,pingan_bddspsys,project_ydlmain6,std_laravel,study_laravel,study_laravel_02,task,test,test2,test3,test_dsp,test_fuel,test_project,test_todolist,testdb,thinking_wordpress,tmp_delete,web,work_bbd2pingan,work_dsp_center,worker,worker_dsp,x6cms,x6cms_115.29.78.250_2015_06_29,x6cms_test_load,x6cms_to_load_img,ydlmain,yii2-b2b-farm,yii2-b2b-megrations,yii2_test,yii2basic,yii_ecshop,ytwo";

        $arr = explode(',', $str);

        foreach ($arr as $item) {

            if(strpos($item, 'schema'))
                continue;

            $str = sprintf("mysqldump -uroot -p123456 -R %s > d:\\backup_db_sql\\%s.sql", $item, $item);
            echo $str;
            echo '<br/>';
        }

        exit;

        try{
            $model = new UserMongoModel();
            $model->setAttributes(['name'=> 'jack','age'=>'3'], false);
            //$rs = $model->save();
            //var_dump($rs);
        } catch (Exception $e){
            print_r($e->getMessage());
        }

        $rs = $model->find(true)->all();
        foreach ($rs as $item) {
            echo $item->name . '<br/>';
            echo $item->_id . '<br/>';
        }

        $itemModel = $model->findOne('585bdb3451c1bb844700002a');
        $itemModel->name = "肖红阳";
        $itemModel->save();
        print_r($itemModel->name);

        exit;
        $command = Yii::$app->mongodb->createCommand();
        $rs = $command->addInsert(['name'=> 'new'])
            ->executeBatch('students');

        var_dump($rs);

        //phpinfo();

        echo 33;exit;

        $teamModel = null;
        if(!Yii::$app->user->isGuest) {

            $userId = Yii::$app->user->identity->getId();

            $teamIds = TeamUserModel::find()->where(['user_id' => $userId])->select('team_id')->one() ;
            $teamModel = TeamModel::findOne([  'team_id' => $teamIds]);
        } else {

            $cookies = Yii::$app->response->cookies;
            $cookies->remove('wxOpenid');
        }

        return $this->render('index', [
            'teamModel' => $teamModel
        ]);
    }

    /**
     * Login action.
     *
     * @return string
     */
    public function actionLogin()
    {


        $wxOpenid = Yii::$app->request->get('wxOpenid');

        $wxContent = file_get_contents("https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx2887eeeac1e7d898&redirect_uri=" . urlencode("http://gx.xjc1.com/wx/oauth2") . "&response_type=code&scope=snsapi_userinfo&state=1&connect_redirect=1#wechat_redirect");
        $wxContent = iconv('gb2312', 'utf-8', $wxContent);
        if( !strpos($wxContent, "请在微信客户端打开链接") || strpos($_SERVER['HTTP_USER_AGENT'], 'MicroMessenger') !== false ) {
 
            
            if(!$wxOpenid){
                $cookies = Yii::$app->request->cookies;  
                if(!$cookies->has('wxOpenid')){

                    $url = "https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx2887eeeac1e7d898&redirect_uri=" . urlencode("http://gx.xjc1.com/wx/oauth2") . "&response_type=code&scope=snsapi_userinfo&state=1&connect_redirect=1#wechat_redirect";
                    header("Location:$url");
                    return false;
                } else {
                    /*var_dump($cookies->get('wxOpenid'));
                    echo '<br/>';
                    var_dump($cookies->get('wxOpenid')->value);*/
                }
            }else{
                //cookie('wxOpenid',$wxOpenid,36000000000);
                $cookies = Yii::$app->response->cookies;
                $cookies->add(new Cookie([
                    'name' => wxOpenid,
                    'value' => $wxOpenid,
                    'expire' => 36000000000
                ]));
            }
        }

        if (!Yii::$app->user->isGuest) {

            $user = UserIdentity::findOne(['id' => Yii::$app->user->id]);
            $userInfo = $user->userInfo;
            if(!$userInfo || !is_object($userInfo) || !$userInfo->id){
                $this->redirect(Url::to('/site/register'));
            } else {
                $this->goHome();
            }
        }

        $model = new LoginForm();

        if(Yii::$app->request->isPost){

            if ($model->login()) {
                return $this->redirect(Url::to('/site/register'));
            } else if(Yii::$app->request->post('mobile')) {
                $model->mobile = Yii::$app->request->post('mobile');
            }
        }
        return $this->render('login', [
            'model' => $model,
        ]);
    }

    /**
     * Logout action.
     *
     * @return string
     */
    public function actionLogout()
    {

        Yii::$app->user->logout();

        return $this->goHome();
    }

    /**
     * Displays contact page.
     *
     * @return string
     */
    public function actionContact()
    {
        $model = new ContactForm();
        if ($model->load(Yii::$app->request->post()) && $model->contact(Yii::$app->params['adminEmail'])) {
            Yii::$app->session->setFlash('contactFormSubmitted');

            return $this->refresh();
        }
        return $this->render('contact', [
            'model' => $model,
        ]);
    }

    /**
     * Displays about page.
     *
     * @return string
     */
    public function actionAbout()
    {
        return $this->render('about');
    }


    public function actionRegister(){

        if (!is_null(Yii::$app->user->identity->userInfo))
            return $this->redirect(Url::to('/'));

        $this->layout = false;
        $model = new RegisterUserInfoModel();

        $model->clockTime = '09:30';
        $model->offDutyTime = '17:30';
        $model->sex = 1;
        $model->role = 1;
        $model->mobile = Yii::$app->user->identity->mobile;


        if(Yii::$app->request->isPost){
            if($model->create(Yii::$app->request->post())){
                $this->redirect(Url::to('/site/login'));
            } else {
            }
        }

        $currentAddInfo = MapHelper::getCurrentInfo();
//        print_r($currentAddInfo);exit;
        $currentAddExist = false;


        if(is_array($currentAddInfo) && count($currentAddInfo) && key_exists('status', $currentAddInfo) && $currentAddInfo['status']==0 ){
            if(key_exists('content', $currentAddInfo)) {
                $content = $currentAddInfo['content'];
                if(is_array($content) && key_exists('address', $content)) {
                    $currentAddExist = true;
                    $currentAddInfo['point'] = $content['point']['x'] . ',' . $content['point']['y'];
                }
            }
        }


        return $this->render('register', [
            'model' => $model,
            'currentAddInfo' => $currentAddInfo,
            'currentAddExist' => $currentAddExist
        ]);
    }

    public function actionRouteInfo(){

        $teamId = \Yii::$app->request->get('id');
        $teamModel = TeamModel::findOne(['team_id' => $teamId]);

        return $this->render('route_info', ['teamModel' => $teamModel]);

    }
    public function actionRouteList(){

        $teamList = TeamModel::find()->where(['>', 'team_id', 0])->all();
        return $this->render('teamList', ['teamList' => $teamList]);
    }

    public function actionRentCar(){
        return $this->render('rentCar');
    }

    public function actionRentCarInfo(){
        return $this->render('rentCarInfo');
    }

    public function actionRentCarType(){
        return $this->render('rentCarType');
    }

    public function actionRentCarInfo_k11(){
        return $this->render('rentCarInfo_k11');
    }

    public function actionRentCarType_k11(){
        return $this->render('rentCarType_k11');
    }

    public function actionTest(){

        $distance  = ConfigTrait::getDistanceLimit();
        print_r($distance);


        var_dump(ConfigTrait::getDistanceLimit());
        var_dump(ConfigTrait::getClockTimeLimit());
        var_dump(ConfigTrait::getOffDutyLimit());
        exit;
    }

    /*public function actionMyInfo(){

        $this->checkLogin();

        $userInfoModel = RegisterUserInfoModel::findOne(['user_id' => Yii::$app->user->identity->getId()]);
        if(!$userInfoModel)
            return $this->redirect(Url::to(['/site/register']));

        return $this->render('myInfo', [
            'model' => $userInfoModel
        ]);
    }*/

    public function actionMyInfo(){

        $this->checkLogin();


        $model = RegisterUserInfoModel::findOne(['user_id' => Yii::$app->user->identity->getId()]);
        if(!$model)
            return $this->redirect(Url::to(['/site/register']));
        else{

            if(Yii::$app->request->isPost){
                if($model->create(Yii::$app->request->post())){
                    //修改成功
                    $model = RegisterUserInfoModel::findOne(['user_id' => Yii::$app->user->identity->getId()]);
                    Yii::$app->session->setFlash('info', '信息修改成功');
                }
            }
            $currentAddInfo = MapHelper::getCurrentInfo();
            $currentAddExist = false;

            if(is_array($currentAddInfo) && count($currentAddInfo) && key_exists('status', $currentAddInfo) && $currentAddInfo['status']==0 ){
                if(key_exists('content', $currentAddInfo)) {
                    $content = $currentAddInfo['content'];
                    if(is_array($content) && key_exists('address', $content)) {
                        $currentAddExist = true;
                        $currentAddInfo['point'] = $content['point']['x'] . ',' . $content['point']['y'];
                    }
                }
            }

            return $this->render('myInfo', [
                'model' => $model,
                'currentAddInfo' => $currentAddInfo,
                'currentAddExist' => $currentAddExist
            ]);
        }
    }

    //退出小组,乘客撤销，小组减少一人；司机撤销，整个小组解散
    public function actionCancel(){
        $this->checkLogin();

        $teamModel = Yii::$app->user->identity->team;
        if(is_null($teamModel)) {
            $this->renderJson(0, '您当前不属于任何通勤小组');
        } else if($teamModel instanceof TeamModel){
             if ($teamModel->cancel(Yii::$app->user->identity)) {
                 $this->renderJson(0, '成功退出通勤小组');
             } else {
                 $this->renderJson(0, '退出失败');
             }
        }
    }
}
